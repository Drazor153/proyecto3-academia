// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  run           Int      @id
  dv            String   @db.Char(1)
  name          String
  first_surname String
  password      String
  email         String?
  role          String
  status        String
  date_join     DateTime @default(now())
  last_join     DateTime @default(now())
  updated_at    DateTime @updatedAt
  refresh_token String?

  enrols         enrols[]
  gives          gives[]
  Attendance     Attendance[]
  Justification  Justification[]
  Announcement   Announcement[]
  lesson_teacher lesson_teacher[]
}

model Level {
  code String @id @db.Char(2)
  name String

  enrols  enrols[]
  Quiz    Quiz[]
  teaches Lesson[]
}

model enrols {
  studentRun Int
  levelCode  String  @db.Char(2)
  year       Int
  semester   Int
  paid       Boolean @default(false)
  status     String

  level   Level @relation(fields: [levelCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  student User  @relation(fields: [studentRun], references: [run], onDelete: Cascade, onUpdate: Cascade)

  @@id([levelCode, studentRun, year, semester])
}

model Topic {
  id   Int    @id @default(autoincrement())
  name String

  Quiz Quiz[]
}

model Quiz {
  id        Int    @id @default(autoincrement())
  number    Int
  year      Int
  semester  Int
  topicId   Int
  levelCode String @db.Char(2)

  gives gives[]
  topic Topic   @relation(fields: [topicId], references: [id])
  level Level   @relation(fields: [levelCode], references: [code])
}

model gives {
  quizId     Int
  studentRun Int
  grade      Float

  quiz    Quiz @relation(fields: [quizId], references: [id])
  student User @relation(fields: [studentRun], references: [run], onDelete: Cascade, onUpdate: Cascade)

  @@id([quizId, studentRun])
}

model Lesson {
  id        Int    @id @default(autoincrement())
  levelCode String @db.Char(2)
  year      Int
  semester  Int
  lesson    String @db.Char(1)

  Class          Class[]
  level          Level            @relation(fields: [levelCode], references: [code])
  lesson_teacher lesson_teacher[]
}

model lesson_teacher {
  lessonId   Int
  teacherRun Int

  lesson  Lesson @relation(fields: [lessonId], references: [id])
  teacher User   @relation(fields: [teacherRun], references: [run], onDelete: Cascade, onUpdate: Cascade)

  @@id([lessonId, teacherRun])
}

model Class {
  id       Int      @id @default(autoincrement())
  date     DateTime @default(now())
  contents String
  lessonId Int

  lesson     Lesson       @relation(fields: [lessonId], references: [id])
  attendance Attendance[]
}

model Attendance {
  class      Class @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId    Int
  student    User  @relation(fields: [studentRun], references: [run], onDelete: Cascade, onUpdate: Cascade)
  studentRun Int

  //added this to refer to justification model ;d
  justification   Justification? @relation(fields: [justificationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  justificationId Int?

  attended Boolean @default(false)

  @@id([classId, studentRun])
}

//Justification entity
model Justification {
  id              Int      @id @default(autoincrement())
  init_ausencia   DateTime @default(now())
  end_ausencia    DateTime @default(now())
  num_inasistente Int //<-- I got doubts about this, is this a composite for (end_ausencia - init_ausencia)?
  reason          String
  file            String
  approved        String //Boolean?
  studentRun      Int

  Attendance Attendance[]
  student    User         @relation(fields: [studentRun], references: [run], onDelete: Cascade, onUpdate: Cascade)
}

model Announcement {
  id       Int      @id @default(autoincrement())
  run      Int?
  title    String
  content  String   @db.VarChar(500)
  image    Bytes?
  send_to  String[]
  category String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expires_at DateTime

  user User? @relation(fields: [run], references: [run], onDelete: SetNull, onUpdate: Cascade)
}

model Target {
  id   Int    @id @default(autoincrement())
  name String
}

model Category {
  id   Int    @id @default(autoincrement())
  name String
}
